{
  "TypeName": "System.Management.Automation.ErrorRecord",
  "TypeNames": [
    "System.Management.Automation.ErrorRecord"
  ],
  "FormatViewDefinition": [
    {
      "Name": "ErrorInstance",
      "Control": {
        "Entries": [
          {
            "SelectedBy": null,
            "CustomItems": [
              {
                "ItemSelectionCondition": null,
                "Expression": {
                  "ValueType": 1,
                  "Value": "\r\n                                    if (@('NativeCommandErrorMessage','NativeCommandError') -notcontains $_.FullyQualifiedErrorId -and @('CategoryView','ConciseView','DetailedView') -notcontains $ErrorView)\r\n                                    {\r\n                                        $myinv = $_.InvocationInfo\r\n                                        if ($myinv -and $myinv.MyCommand)\r\n                                        {\r\n                                            switch -regex ( $myinv.MyCommand.CommandType )\r\n                                            {\r\n                                                ([System.Management.Automation.CommandTypes]::ExternalScript)\r\n                                                {\r\n                                                    if ($myinv.MyCommand.Path)\r\n                                                    {\r\n                                                        $myinv.MyCommand.Path + ' : '\r\n                                                    }\r\n\r\n                                                    break\r\n                                                }\r\n\r\n                                                ([System.Management.Automation.CommandTypes]::Script)\r\n                                                {\r\n                                                    if ($myinv.MyCommand.ScriptBlock)\r\n                                                    {\r\n                                                        $myinv.MyCommand.ScriptBlock.ToString() + ' : '\r\n                                                    }\r\n\r\n                                                    break\r\n                                                }\r\n                                                default\r\n                                                {\r\n                                                    if ($myinv.InvocationName -match '^[&\\.]?$')\r\n                                                    {\r\n                                                        if ($myinv.MyCommand.Name)\r\n                                                        {\r\n                                                            $myinv.MyCommand.Name + ' : '\r\n                                                        }\r\n                                                    }\r\n                                                    else\r\n                                                    {\r\n                                                        $myinv.InvocationName + ' : '\r\n                                                    }\r\n\r\n                                                    break\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        elseif ($myinv -and $myinv.InvocationName)\r\n                                        {\r\n                                            $myinv.InvocationName + ' : '\r\n                                        }\r\n                                    }\r\n                                "
                },
                "EnumerateCollection": false,
                "CustomControl": null
              },
              {
                "ItemSelectionCondition": null,
                "Expression": {
                  "ValueType": 1,
                  "Value": "\r\n                                    Set-StrictMode -Off\r\n                                    $ErrorActionPreference = 'Stop'\r\n                                    trap { 'Error found in error view definition: ' + $_.Exception.Message }\r\n                                    $newline = [Environment]::Newline\r\n\r\n                                    $resetColor = ''\r\n                                    $errorColor = ''\r\n                                    $accentColor = ''\r\n\r\n                                    if ($Host.UI.SupportsVirtualTerminal -and ([string]::IsNullOrEmpty($env:__SuppressAnsiEscapeSequences))) {\r\n                                        $resetColor = $PSStyle.Reset\r\n                                        $errorColor = $PSStyle.Formatting.Error\r\n                                        $accentColor = $PSStyle.Formatting.ErrorAccent\r\n                                    }\r\n\r\n                                    function Get-ConciseViewPositionMessage {\r\n\r\n                                        # returns a string cut to last whitespace\r\n                                        function Get-TruncatedString($string, [int]$length) {\r\n\r\n                                            if ($string.Length -le $length) {\r\n                                                return $string\r\n                                            }\r\n\r\n                                            return ($string.Substring(0,$length) -split '\\s',-2)[0]\r\n                                        }\r\n\r\n                                        $posmsg = ''\r\n                                        $headerWhitespace = ''\r\n                                        $offsetWhitespace = ''\r\n                                        $message = ''\r\n                                        $prefix = ''\r\n\r\n                                        # The checks here determine if we show line detailed error information:\r\n                                        # - check if `ParserError` and comes from PowerShell which eventually results in a ParseException, but during this execution it's an ErrorRecord\r\n                                        # - check if invocation is a script or multiple lines in the console\r\n                                        # - check that it's not a script module as expectation is that users don't want to see the line of error within a module\r\n                                        if ((($err.CategoryInfo.Category -eq 'ParserError' -and $err.Exception -is 'System.Management.Automation.ParentContainsErrorRecordException') -or $myinv.ScriptName -or $myinv.ScriptLineNumber -gt 1) -and $myinv.ScriptName -notmatch '\\.psm1$') {\r\n                                            $useTargetObject = $false\r\n\r\n                                            # Handle case where there is a TargetObject and we can show the error at the target rather than the script source\r\n                                            if ($_.TargetObject.Line -and $_.TargetObject.LineText) {\r\n                                                $posmsg = \"${resetcolor}$($_.TargetObject.File)${newline}\"\r\n                                                $useTargetObject = $true\r\n                                            }\r\n                                            elseif ($myinv.ScriptName) {\r\n                                                if ($env:TERM_PROGRAM -eq 'vscode') {\r\n                                                    # If we are running in vscode, we know the file:line:col links are clickable so we use this format\r\n                                                    $posmsg = \"${resetcolor}$($myinv.ScriptName):$($myinv.ScriptLineNumber):$($myinv.OffsetInLine)${newline}\"\r\n                                                }\r\n                                                else {\r\n                                                    $posmsg = \"${resetcolor}$($myinv.ScriptName):$($myinv.ScriptLineNumber)${newline}\"\r\n                                                }\r\n                                            }\r\n                                            else {\r\n                                                $posmsg = \"${newline}\"\r\n                                            }\r\n\r\n                                            if ($useTargetObject) {\r\n                                                $scriptLineNumber = $_.TargetObject.Line\r\n                                                $scriptLineNumberLength = $_.TargetObject.Line.ToString().Length\r\n                                            }\r\n                                            else {\r\n                                                $scriptLineNumber = $myinv.ScriptLineNumber\r\n                                                $scriptLineNumberLength = $myinv.ScriptLineNumber.ToString().Length\r\n                                            }\r\n\r\n                                            if ($scriptLineNumberLength -gt 4) {\r\n                                                $headerWhitespace = ' ' * ($scriptLineNumberLength - 4)\r\n                                            }\r\n\r\n                                            $lineWhitespace = ''\r\n                                            if ($scriptLineNumberLength -lt 4) {\r\n                                                $lineWhitespace = ' ' * (4 - $scriptLineNumberLength)\r\n                                            }\r\n\r\n                                            $verticalBar = '|'\r\n                                            $posmsg += \"${accentColor}${headerWhitespace}Line ${verticalBar}${newline}\"\r\n\r\n                                            $highlightLine = ''\r\n                                            if ($useTargetObject) {\r\n                                                $line = $_.TargetObject.LineText.Trim()\r\n                                                $offsetLength = 0\r\n                                                $offsetInLine = 0\r\n                                            }\r\n                                            else {\r\n                                                $positionMessage = $myinv.PositionMessage.Split($newline)\r\n                                                $line = $positionMessage[1].Substring(1) # skip the '+' at the start\r\n                                                $highlightLine = $positionMessage[$positionMessage.Count - 1].Substring(1)\r\n                                                $offsetLength = $highlightLine.Trim().Length\r\n                                                $offsetInLine = $highlightLine.IndexOf('~')\r\n                                            }\r\n\r\n                                            if (-not $line.EndsWith($newline)) {\r\n                                                $line += $newline\r\n                                            }\r\n\r\n                                            # don't color the whole line\r\n                                            if ($offsetLength -lt $line.Length - 1) {\r\n                                                $line = $line.Insert($offsetInLine + $offsetLength, $resetColor).Insert($offsetInLine, $accentColor)\r\n                                            }\r\n\r\n                                            $posmsg += \"${accentColor}${lineWhitespace}${ScriptLineNumber} ${verticalBar} ${resetcolor}${line}\"\r\n                                            $offsetWhitespace = ' ' * $offsetInLine\r\n                                            $prefix = \"${accentColor}${headerWhitespace}     ${verticalBar} ${errorColor}\"\r\n                                            if ($highlightLine -ne '') {\r\n                                                $posMsg += \"${prefix}${highlightLine}${newline}\"\r\n                                            }\r\n                                            $message = \"${prefix}\"\r\n                                        }\r\n\r\n                                        if (! $err.ErrorDetails -or ! $err.ErrorDetails.Message) {\r\n                                            if ($err.CategoryInfo.Category -eq 'ParserError' -and $err.Exception.Message.Contains(\"~$newline\")) {\r\n                                                # need to parse out the relevant part of the pre-rendered positionmessage\r\n                                                $message += $err.Exception.Message.split(\"~$newline\")[1].split(\"${newline}${newline}\")[0]\r\n                                            }\r\n                                            elseif ($err.Exception) {\r\n                                                $message += $err.Exception.Message\r\n                                            }\r\n                                            elseif ($err.Message) {\r\n                                                $message += $err.Message\r\n                                            }\r\n                                            else {\r\n                                                $message += $err.ToString()\r\n                                            }\r\n                                        }\r\n                                        else {\r\n                                            $message += $err.ErrorDetails.Message\r\n                                        }\r\n\r\n                                        # if rendering line information, break up the message if it's wider than the console\r\n                                        if ($myinv -and $myinv.ScriptName -or $err.CategoryInfo.Category -eq 'ParserError') {\r\n                                            $prefixLength = [System.Management.Automation.Internal.StringDecorated]::new($prefix).ContentLength\r\n                                            $prefixVtLength = $prefix.Length - $prefixLength\r\n\r\n                                            # replace newlines in message so it lines up correct\r\n                                            $message = $message.Replace($newline, ' ').Replace(\"`n\", ' ').Replace(\"`t\", ' ')\r\n\r\n                                            $windowWidth = 120\r\n                                            if ($Host.UI.RawUI -ne $null) {\r\n                                                $windowWidth = $Host.UI.RawUI.WindowSize.Width\r\n                                            }\r\n\r\n                                            if ($windowWidth -gt 0 -and ($message.Length - $prefixVTLength) -gt $windowWidth) {\r\n                                                $sb = [Text.StringBuilder]::new()\r\n                                                $substring = Get-TruncatedString -string $message -length ($windowWidth + $prefixVTLength)\r\n                                                $null = $sb.Append($substring)\r\n                                                $remainingMessage = $message.Substring($substring.Length).Trim()\r\n                                                $null = $sb.Append($newline)\r\n                                                while (($remainingMessage.Length + $prefixLength) -gt $windowWidth) {\r\n                                                    $subMessage = $prefix + $remainingMessage\r\n                                                    $substring = Get-TruncatedString -string $subMessage -length ($windowWidth + $prefixVtLength)\r\n\r\n                                                    if ($substring.Length - $prefix.Length -gt 0)\r\n                                                    {\r\n                                                        $null = $sb.Append($substring)\r\n                                                        $null = $sb.Append($newline)\r\n                                                        $remainingMessage = $remainingMessage.Substring($substring.Length - $prefix.Length).Trim()\r\n                                                    }\r\n                                                    else\r\n                                                    {\r\n                                                        break\r\n                                                    }\r\n                                                }\r\n                                                $null = $sb.Append($prefix + $remainingMessage.Trim())\r\n                                                $message = $sb.ToString()\r\n                                            }\r\n\r\n                                            $message += $newline\r\n                                        }\r\n\r\n                                        $posmsg += \"${errorColor}\" + $message\r\n\r\n                                        $reason = 'Error'\r\n                                        if ($err.Exception -and $err.Exception.WasThrownFromThrowStatement) {\r\n                                            $reason = 'Exception'\r\n                                        }\r\n                                        # MyCommand can be the script block, so we don't want to show that so check if it's an actual command\r\n                                        elseif ($myinv.MyCommand -and $myinv.MyCommand.Name -and (Get-Command -Name $myinv.MyCommand -ErrorAction Ignore))\r\n                                        {\r\n                                            $reason = $myinv.MyCommand\r\n                                        }\r\n                                        # If it's a scriptblock, better to show the command in the scriptblock that had the error\r\n                                        elseif ($_.CategoryInfo.Activity) {\r\n                                            $reason = $_.CategoryInfo.Activity\r\n                                        }\r\n                                        elseif ($myinv.MyCommand) {\r\n                                            $reason = $myinv.MyCommand\r\n                                        }\r\n                                        elseif ($myinv.InvocationName) {\r\n                                            $reason = $myinv.InvocationName\r\n                                        }\r\n                                        elseif ($err.CategoryInfo.Category) {\r\n                                            $reason = $err.CategoryInfo.Category\r\n                                        }\r\n                                        elseif ($err.CategoryInfo.Reason) {\r\n                                            $reason = $err.CategoryInfo.Reason\r\n                                        }\r\n\r\n                                        $errorMsg = 'Error'\r\n\r\n                                        \"${errorColor}${reason}: ${posmsg}${resetcolor}\"\r\n                                    }\r\n\r\n                                    $myinv = $_.InvocationInfo\r\n                                    $err = $_\r\n                                    if (!$myinv -and $_.ErrorRecord -and $_.ErrorRecord.InvocationInfo) {\r\n                                        $err = $_.ErrorRecord\r\n                                        $myinv = $err.InvocationInfo\r\n                                    }\r\n\r\n                                    if ($err.FullyQualifiedErrorId -eq 'NativeCommandErrorMessage' -or $err.FullyQualifiedErrorId -eq 'NativeCommandError') {\r\n                                        return \"${errorColor}$($err.Exception.Message)${resetcolor}\"\r\n                                    }\r\n\r\n                                    $myinv = $err.InvocationInfo\r\n                                    if ($ErrorView -eq 'DetailedView') {\r\n                                        $message = Get-Error | Out-String\r\n                                        return \"${errorColor}${message}${resetcolor}\"\r\n                                    }\r\n\r\n                                    if ($ErrorView -eq 'CategoryView') {\r\n                                        $message = $err.CategoryInfo.GetMessage()\r\n                                        return \"${errorColor}${message}${resetcolor}\"\r\n                                    }\r\n\r\n                                    $posmsg = ''\r\n                                    if ($ErrorView -eq 'ConciseView') {\r\n                                        $posmsg = Get-ConciseViewPositionMessage\r\n                                    }\r\n                                    elseif ($myinv -and ($myinv.MyCommand -or ($err.CategoryInfo.Category -ne 'ParserError'))) {\r\n                                        $posmsg = $myinv.PositionMessage\r\n                                    }\r\n\r\n                                    if ($posmsg -ne '') {\r\n                                        $posmsg = $newline + $posmsg\r\n                                    }\r\n\r\n                                    if ($err.PSMessageDetails) {\r\n                                        $posmsg = ' : ' +  $err.PSMessageDetails + $posmsg\r\n                                    }\r\n\r\n                                    if ($ErrorView -eq 'ConciseView') {\r\n                                        if ($err.PSMessageDetails) {\r\n                                            $posmsg = \"${errorColor}${posmsg}\"\r\n                                        }\r\n                                        return $posmsg\r\n                                    }\r\n\r\n                                    $indent = 4\r\n\r\n                                    $errorCategoryMsg = $err.ErrorCategory_Message\r\n\r\n                                    if ($null -ne $errorCategoryMsg)\r\n                                    {\r\n                                        $indentString = '+ CategoryInfo          : ' + $err.ErrorCategory_Message\r\n                                    }\r\n                                    else\r\n                                    {\r\n                                        $indentString = '+ CategoryInfo          : ' + $err.CategoryInfo\r\n                                    }\r\n\r\n                                    $posmsg += $newline + $indentString\r\n\r\n                                    $indentString = \"+ FullyQualifiedErrorId : \" + $err.FullyQualifiedErrorId\r\n                                    $posmsg += $newline + $indentString\r\n\r\n                                    $originInfo = $err.OriginInfo\r\n\r\n                                    if (($null -ne $originInfo) -and ($null -ne $originInfo.PSComputerName))\r\n                                    {\r\n                                        $indentString = \"+ PSComputerName        : \" + $originInfo.PSComputerName\r\n                                        $posmsg += $newline + $indentString\r\n                                    }\r\n\r\n                                    $finalMsg = if ($err.ErrorDetails.Message) {\r\n                                        $err.ErrorDetails.Message + $posmsg\r\n                                    } else {\r\n                                        $err.Exception.Message + $posmsg\r\n                                    }\r\n\r\n                                    \"${errorColor}${finalMsg}${resetcolor}\"\r\n                                "
                },
                "EnumerateCollection": false,
                "CustomControl": null
              }
            ]
          }
        ],
        "GroupBy": null,
        "OutOfBand": true
      }
    }
  ]
}
